
//! Autogenerated weights for pallet_dao_subscription
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `macbook-pro.lan`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/societal-node
// benchmark
// pallet
// --chain
// dev
// --steps
// 50
// --repeat
// 20
// --pallet
// pallet_dao_subscription
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --template
// ./.maintain/frame-weight-template.hbs
// --output
// ./pallets/dao-subscription/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_dao_subscription.
pub trait WeightInfo {
	fn set_subscription_tier() -> Weight;
	fn suspend_subscription() -> Weight;
}

/// Weights for pallet_dao_subscription using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: DaoSubscription SubscriptionTiers (r:0 w:1)
	/// Proof: DaoSubscription SubscriptionTiers (max_values: None, max_size: Some(414), added: 2889, mode: MaxEncodedLen)
	fn set_subscription_tier() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DaoSubscription Subscriptions (r:1 w:1)
	/// Proof: DaoSubscription Subscriptions (max_values: None, max_size: Some(462), added: 2937, mode: MaxEncodedLen)
	fn suspend_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `3927`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3927)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: DaoSubscription SubscriptionTiers (r:0 w:1)
	/// Proof: DaoSubscription SubscriptionTiers (max_values: None, max_size: Some(414), added: 2889, mode: MaxEncodedLen)
	fn set_subscription_tier() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DaoSubscription Subscriptions (r:1 w:1)
	/// Proof: DaoSubscription Subscriptions (max_values: None, max_size: Some(462), added: 2937, mode: MaxEncodedLen)
	fn suspend_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `3927`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3927)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
